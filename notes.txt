// ES6 

// - scoping
// - const - cannot be reassigned - for var that doest change
// - let - changes 

const obj = {
    player: 'bobby',
    experience: 100,
    wizardLevel: false
}

// - cannot reassign obj ex obj = 5
// - but obj properties can be changed

const player = obj.player;
const experience = obj.experience;
let wizardLevel = obj.wizardLevel;

const { player, experience } = obj;
let { wizardLevel } = obj;


// Template strings
const name = "Sally";
const greeting = "Hello" + name + "you seem to be doing" + greeting + "!";
const greetingBest = `Hello ${name} you seem to be ${age - 10}. What a lovely ${pet} you have`; //better

// Default arguments
function greet(name = '', age = 30, pet='cat') {
    return `Hello ${name} you seem to be ${age - 10}. What a lovely ${pet} you have`;
}

const first = () => {
    const greet = 'hi';
    const second = () => {
        alert(greet);
    }
    return second;
}


// closures

// currying
const multiply = (a, b) => a * b;
const curriedMultiply = (a) => (b) => a * b;
const multiplyBy5 = curriedMultiply(5);

// compose
const compose = (f, g) => (a) => f(g(a));
const sum = (num) => num + 1;
compose(sum, sum)(5);

//reference type

